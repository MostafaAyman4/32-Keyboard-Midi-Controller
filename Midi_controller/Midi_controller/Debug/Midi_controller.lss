
Midi_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000776  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000007ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1a  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081e  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080e  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000581  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb8  00000000  00000000  00002c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "util/delay.h"



int main(void)
{/*
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
		MDIO_VOID_PORT_SET_DATA(PORT_C,0b10000100,LOW);
		MDIO_void_pin_set_data(PD3,LOW);
		_delay_ms(1000);
		
    }*/
	MUART_void_initiate();
  90:	0e 94 9f 03 	call	0x73e	; 0x73e <MUART_void_initiate>
	HPIANO_32KEY_void_initiate();
  94:	0e 94 68 00 	call	0xd0	; 0xd0 <HPIANO_32KEY_void_initiate>
	while (1)
	{
		uint32 asser=0x00000000;
  98:	1d 82       	std	Y+5, r1	; 0x05
  9a:	1e 82       	std	Y+6, r1	; 0x06
  9c:	1f 82       	std	Y+7, r1	; 0x07
  9e:	18 86       	std	Y+8, r1	; 0x08
		uint32 deasser=0x00000000;
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	1a 82       	std	Y+2, r1	; 0x02
  a4:	1b 82       	std	Y+3, r1	; 0x03
  a6:	1c 82       	std	Y+4, r1	; 0x04
		HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY(&asser,&deasser);
  a8:	be 01       	movw	r22, r28
  aa:	6f 5f       	subi	r22, 0xFF	; 255
  ac:	7f 4f       	sbci	r23, 0xFF	; 255
  ae:	ce 01       	movw	r24, r28
  b0:	05 96       	adiw	r24, 0x05	; 5
  b2:	0e 94 bf 00 	call	0x17e	; 0x17e <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY>
		MUART_void_send_Byte(asser);
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	0e 94 b5 03 	call	0x76a	; 0x76a <MUART_void_send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x46>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x50>
  cc:	00 00       	nop
  ce:	e4 cf       	rjmp	.-56     	; 0x98 <main+0x1c>

000000d0 <HPIANO_32KEY_void_initiate>:
#include "PIANO_32KEY_header.h"

uint32 piano_32keys_flag= 0x0000;

void  HPIANO_32KEY_void_initiate(){
	MDIO_VOID_PORT_SET_DIRECTION(columns_port,columns_pins,OUTPUT);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	6f e0       	ldi	r22, 0x0F	; 15
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 1e 03 	call	0x63c	; 0x63c <MDIO_VOID_PORT_SET_DIRECTION>
	MDIO_VOID_PORT_SET_DIRECTION(rows_port,rows_pins,INPUT);
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	6f e0       	ldi	r22, 0x0F	; 15
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 1e 03 	call	0x63c	; 0x63c <MDIO_VOID_PORT_SET_DIRECTION>
	MDIO_VOID_PORT_SET_DATA(rows_port,rows_pins,PULLUP);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	6f e0       	ldi	r22, 0x0F	; 15
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <MDIO_VOID_PORT_SET_DATA>
  ee:	08 95       	ret

000000f0 <HPIANO_32KEY_uint64_transscan>:
}
uint32 HPIANO_32KEY_uint64_transscan(){
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
	uint32 keys32_reading_value=0x00000000;
	uint8 partial_scan_read;
	MDIO_void_pin_set_data(PA0,HIGH);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
	MDIO_void_pin_set_data(PA1,HIGH);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	8b e0       	ldi	r24, 0x0B	; 11
 108:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
	MDIO_void_pin_set_data(PA2,HIGH);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
	MDIO_void_pin_set_data(PA3,HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
	for(uint8 i=0;i<=no_of_key_matrix;i++){
 11c:	c0 e0       	ldi	r28, 0x00	; 0
	MDIO_VOID_PORT_SET_DIRECTION(columns_port,columns_pins,OUTPUT);
	MDIO_VOID_PORT_SET_DIRECTION(rows_port,rows_pins,INPUT);
	MDIO_VOID_PORT_SET_DATA(rows_port,rows_pins,PULLUP);
}
uint32 HPIANO_32KEY_uint64_transscan(){
	uint32 keys32_reading_value=0x00000000;
 11e:	c1 2c       	mov	r12, r1
 120:	d1 2c       	mov	r13, r1
 122:	76 01       	movw	r14, r12
	uint8 partial_scan_read;
	MDIO_void_pin_set_data(PA0,HIGH);
	MDIO_void_pin_set_data(PA1,HIGH);
	MDIO_void_pin_set_data(PA2,HIGH);
	MDIO_void_pin_set_data(PA3,HIGH);
	for(uint8 i=0;i<=no_of_key_matrix;i++){
 124:	21 c0       	rjmp	.+66     	; 0x168 <HPIANO_32KEY_uint64_transscan+0x78>
		MDIO_void_pin_set_data(i+((columns_port+1)*10),LOW);
 126:	da e0       	ldi	r29, 0x0A	; 10
 128:	dc 0f       	add	r29, r28
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8d 2f       	mov	r24, r29
 12e:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
		uint8 dum=~(MDIO_uint8_PORT_READ_DATA(rows_port));
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 8e 03 	call	0x71c	; 0x71c <MDIO_uint8_PORT_READ_DATA>
 138:	80 95       	com	r24
	    partial_scan_read=dum & key_matrix_mask;  
 13a:	8f 70       	andi	r24, 0x0F	; 15
		keys32_reading_value = (keys32_reading_value<<(no_of_key_matrix+1)) | partial_scan_read;
 13c:	cc 0c       	add	r12, r12
 13e:	dd 1c       	adc	r13, r13
 140:	ee 1c       	adc	r14, r14
 142:	ff 1c       	adc	r15, r15
 144:	cc 0c       	add	r12, r12
 146:	dd 1c       	adc	r13, r13
 148:	ee 1c       	adc	r14, r14
 14a:	ff 1c       	adc	r15, r15
 14c:	cc 0c       	add	r12, r12
 14e:	dd 1c       	adc	r13, r13
 150:	ee 1c       	adc	r14, r14
 152:	ff 1c       	adc	r15, r15
 154:	cc 0c       	add	r12, r12
 156:	dd 1c       	adc	r13, r13
 158:	ee 1c       	adc	r14, r14
 15a:	ff 1c       	adc	r15, r15
 15c:	c8 2a       	or	r12, r24
		MDIO_void_pin_set_data(i+((columns_port+1)*10),HIGH);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	8d 2f       	mov	r24, r29
 162:	0e 94 2f 02 	call	0x45e	; 0x45e <MDIO_void_pin_set_data>
	uint8 partial_scan_read;
	MDIO_void_pin_set_data(PA0,HIGH);
	MDIO_void_pin_set_data(PA1,HIGH);
	MDIO_void_pin_set_data(PA2,HIGH);
	MDIO_void_pin_set_data(PA3,HIGH);
	for(uint8 i=0;i<=no_of_key_matrix;i++){
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	c4 30       	cpi	r28, 0x04	; 4
 16a:	e8 f2       	brcs	.-70     	; 0x126 <HPIANO_32KEY_uint64_transscan+0x36>
	    partial_scan_read=dum & key_matrix_mask;  
		keys32_reading_value = (keys32_reading_value<<(no_of_key_matrix+1)) | partial_scan_read;
		MDIO_void_pin_set_data(i+((columns_port+1)*10),HIGH);
	}
	return keys32_reading_value;
}
 16c:	c7 01       	movw	r24, r14
 16e:	b6 01       	movw	r22, r12
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	cf 90       	pop	r12
 17c:	08 95       	ret

0000017e <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY>:

void HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY(uint32 *local_asserted_data,uint32 *local_deasserted_data){
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	8c 01       	movw	r16, r24
 198:	eb 01       	movw	r28, r22
	uint32 Reading_keys=HPIANO_32KEY_uint64_transscan();
 19a:	0e 94 78 00 	call	0xf0	; 0xf0 <HPIANO_32KEY_uint64_transscan>
 19e:	4b 01       	movw	r8, r22
 1a0:	5c 01       	movw	r10, r24
	for(uint8 i=0;i<=31;i++){
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	55 c0       	rjmp	.+170    	; 0x250 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xd2>
		if(READ_BIT(Reading_keys,i)^READ_BIT(piano_32keys_flag,i)){
 1a6:	75 01       	movw	r14, r10
 1a8:	64 01       	movw	r12, r8
 1aa:	08 2e       	mov	r0, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x38>
 1ae:	f6 94       	lsr	r15
 1b0:	e7 94       	ror	r14
 1b2:	d7 94       	ror	r13
 1b4:	c7 94       	ror	r12
 1b6:	0a 94       	dec	r0
 1b8:	d2 f7       	brpl	.-12     	; 0x1ae <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x30>
 1ba:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c6:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1ca:	08 2e       	mov	r0, r24
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x58>
 1ce:	76 95       	lsr	r23
 1d0:	67 95       	ror	r22
 1d2:	57 95       	ror	r21
 1d4:	47 95       	ror	r20
 1d6:	0a 94       	dec	r0
 1d8:	d2 f7       	brpl	.-12     	; 0x1ce <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x50>
 1da:	4c 25       	eor	r20, r12
 1dc:	5d 25       	eor	r21, r13
 1de:	6e 25       	eor	r22, r14
 1e0:	7f 25       	eor	r23, r15
 1e2:	40 ff       	sbrs	r20, 0
 1e4:	34 c0       	rjmp	.+104    	; 0x24e <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xd0>
			
			if(READ_BIT(Reading_keys,i)==1){
 1e6:	c0 fe       	sbrs	r12, 0
 1e8:	1a c0       	rjmp	.+52     	; 0x21e <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xa0>
				//Asserted_code_send
				SET_BIT(*local_asserted_data,i);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	08 2e       	mov	r0, r24
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x78>
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x74>
 1fa:	05 2e       	mov	r0, r21
 1fc:	00 0c       	add	r0, r0
 1fe:	66 0b       	sbc	r22, r22
 200:	77 0b       	sbc	r23, r23
 202:	f8 01       	movw	r30, r16
 204:	c0 80       	ld	r12, Z
 206:	d1 80       	ldd	r13, Z+1	; 0x01
 208:	e2 80       	ldd	r14, Z+2	; 0x02
 20a:	f3 80       	ldd	r15, Z+3	; 0x03
 20c:	4c 29       	or	r20, r12
 20e:	5d 29       	or	r21, r13
 210:	6e 29       	or	r22, r14
 212:	7f 29       	or	r23, r15
 214:	40 83       	st	Z, r20
 216:	51 83       	std	Z+1, r21	; 0x01
 218:	62 83       	std	Z+2, r22	; 0x02
 21a:	73 83       	std	Z+3, r23	; 0x03
 21c:	18 c0       	rjmp	.+48     	; 0x24e <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xd0>
			}
			else{
				//deasserted code
				SET_BIT(*local_deasserted_data,i);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	08 2e       	mov	r0, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xac>
 226:	44 0f       	add	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xa8>
 22e:	05 2e       	mov	r0, r21
 230:	00 0c       	add	r0, r0
 232:	66 0b       	sbc	r22, r22
 234:	77 0b       	sbc	r23, r23
 236:	c8 80       	ld	r12, Y
 238:	d9 80       	ldd	r13, Y+1	; 0x01
 23a:	ea 80       	ldd	r14, Y+2	; 0x02
 23c:	fb 80       	ldd	r15, Y+3	; 0x03
 23e:	4c 29       	or	r20, r12
 240:	5d 29       	or	r21, r13
 242:	6e 29       	or	r22, r14
 244:	7f 29       	or	r23, r15
 246:	48 83       	st	Y, r20
 248:	59 83       	std	Y+1, r21	; 0x01
 24a:	6a 83       	std	Y+2, r22	; 0x02
 24c:	7b 83       	std	Y+3, r23	; 0x03
	return keys32_reading_value;
}

void HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY(uint32 *local_asserted_data,uint32 *local_deasserted_data){
	uint32 Reading_keys=HPIANO_32KEY_uint64_transscan();
	for(uint8 i=0;i<=31;i++){
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 32       	cpi	r24, 0x20	; 32
 252:	08 f4       	brcc	.+2      	; 0x256 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0xd8>
 254:	a8 cf       	rjmp	.-176    	; 0x1a6 <HPIANO_32KEY_uint32_GET_ASSERTED_DEASSERTED_KEY+0x28>
			}
		}
		else{
		}
	}
	piano_32keys_flag =Reading_keys;
 256:	80 92 60 00 	sts	0x0060, r8	; 0x800060 <__DATA_REGION_ORIGIN__>
 25a:	90 92 61 00 	sts	0x0061, r9	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 25e:	a0 92 62 00 	sts	0x0062, r10	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 262:	b0 92 63 00 	sts	0x0063, r11	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	af 90       	pop	r10
 27a:	9f 90       	pop	r9
 27c:	8f 90       	pop	r8
 27e:	08 95       	ret

00000280 <MDIO_void_pin_set_direction>:
 *  Author: HP
 */ 

#include "DIO_Header.h"
void MDIO_void_pin_set_direction(uint8 local_pin,uint8 local_value){
	uint8 port= local_pin/10;
 280:	9d ec       	ldi	r25, 0xCD	; 205
 282:	89 9f       	mul	r24, r25
 284:	91 2d       	mov	r25, r1
 286:	11 24       	eor	r1, r1
 288:	96 95       	lsr	r25
 28a:	96 95       	lsr	r25
 28c:	96 95       	lsr	r25
	
	switch (local_value)
 28e:	66 23       	and	r22, r22
 290:	09 f4       	brne	.+2      	; 0x294 <MDIO_void_pin_set_direction+0x14>
 292:	72 c0       	rjmp	.+228    	; 0x378 <MDIO_void_pin_set_direction+0xf8>
 294:	61 30       	cpi	r22, 0x01	; 1
 296:	09 f0       	breq	.+2      	; 0x29a <MDIO_void_pin_set_direction+0x1a>
 298:	e1 c0       	rjmp	.+450    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		case OUTPUT:
		switch (port)
 29a:	92 30       	cpi	r25, 0x02	; 2
 29c:	21 f1       	breq	.+72     	; 0x2e6 <MDIO_void_pin_set_direction+0x66>
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <MDIO_void_pin_set_direction+0x26>
 2a0:	91 30       	cpi	r25, 0x01	; 1
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <MDIO_void_pin_set_direction+0x32>
 2a4:	08 95       	ret
 2a6:	93 30       	cpi	r25, 0x03	; 3
 2a8:	c1 f1       	breq	.+112    	; 0x31a <MDIO_void_pin_set_direction+0x9a>
 2aa:	94 30       	cpi	r25, 0x04	; 4
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <MDIO_void_pin_set_direction+0x30>
 2ae:	4c c0       	rjmp	.+152    	; 0x348 <MDIO_void_pin_set_direction+0xc8>
 2b0:	08 95       	ret
		{
			case A:
			local_pin =local_pin %10;
 2b2:	9d ec       	ldi	r25, 0xCD	; 205
 2b4:	89 9f       	mul	r24, r25
 2b6:	91 2d       	mov	r25, r1
 2b8:	11 24       	eor	r1, r1
 2ba:	96 95       	lsr	r25
 2bc:	96 95       	lsr	r25
 2be:	96 95       	lsr	r25
 2c0:	99 0f       	add	r25, r25
 2c2:	29 2f       	mov	r18, r25
 2c4:	22 0f       	add	r18, r18
 2c6:	22 0f       	add	r18, r18
 2c8:	92 0f       	add	r25, r18
 2ca:	89 1b       	sub	r24, r25
			SET_BIT(DIRECTION_REGISTER_A,local_pin);
 2cc:	4a b3       	in	r20, 0x1a	; 26
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	b9 01       	movw	r22, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <MDIO_void_pin_set_direction+0x5a>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <MDIO_void_pin_set_direction+0x56>
 2de:	cb 01       	movw	r24, r22
 2e0:	84 2b       	or	r24, r20
 2e2:	8a bb       	out	0x1a, r24	; 26
			break;
 2e4:	08 95       	ret
			case B:
			local_pin =local_pin %20;
 2e6:	9d ec       	ldi	r25, 0xCD	; 205
 2e8:	89 9f       	mul	r24, r25
 2ea:	91 2d       	mov	r25, r1
 2ec:	11 24       	eor	r1, r1
 2ee:	92 95       	swap	r25
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	99 0f       	add	r25, r25
 2f4:	99 0f       	add	r25, r25
 2f6:	29 2f       	mov	r18, r25
 2f8:	22 0f       	add	r18, r18
 2fa:	22 0f       	add	r18, r18
 2fc:	92 0f       	add	r25, r18
 2fe:	89 1b       	sub	r24, r25
			SET_BIT(DIRECTION_REGISTER_B,local_pin);
 300:	47 b3       	in	r20, 0x17	; 23
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	b9 01       	movw	r22, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <MDIO_void_pin_set_direction+0x8e>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <MDIO_void_pin_set_direction+0x8a>
 312:	cb 01       	movw	r24, r22
 314:	84 2b       	or	r24, r20
 316:	87 bb       	out	0x17, r24	; 23
			break;
 318:	08 95       	ret
			case C:
			local_pin =local_pin %30;
 31a:	99 e8       	ldi	r25, 0x89	; 137
 31c:	89 9f       	mul	r24, r25
 31e:	91 2d       	mov	r25, r1
 320:	11 24       	eor	r1, r1
 322:	92 95       	swap	r25
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	7e e1       	ldi	r23, 0x1E	; 30
 328:	97 9f       	mul	r25, r23
 32a:	80 19       	sub	r24, r0
 32c:	11 24       	eor	r1, r1
			SET_BIT(DIRECTION_REGISTER_C,local_pin);
 32e:	44 b3       	in	r20, 0x14	; 20
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <MDIO_void_pin_set_direction+0xbc>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <MDIO_void_pin_set_direction+0xb8>
 340:	cb 01       	movw	r24, r22
 342:	84 2b       	or	r24, r20
 344:	84 bb       	out	0x14, r24	; 20
			break;
 346:	08 95       	ret
			case D:
			local_pin =local_pin %40;
 348:	9d ec       	ldi	r25, 0xCD	; 205
 34a:	89 9f       	mul	r24, r25
 34c:	91 2d       	mov	r25, r1
 34e:	11 24       	eor	r1, r1
 350:	92 95       	swap	r25
 352:	96 95       	lsr	r25
 354:	97 70       	andi	r25, 0x07	; 7
 356:	78 e2       	ldi	r23, 0x28	; 40
 358:	97 9f       	mul	r25, r23
 35a:	80 19       	sub	r24, r0
 35c:	11 24       	eor	r1, r1
			SET_BIT(DIRECTION_REGISTER_D,local_pin);
 35e:	41 b3       	in	r20, 0x11	; 17
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <MDIO_void_pin_set_direction+0xec>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <MDIO_void_pin_set_direction+0xe8>
 370:	cb 01       	movw	r24, r22
 372:	84 2b       	or	r24, r20
 374:	81 bb       	out	0x11, r24	; 17
			break;
 376:	08 95       	ret
		}
		break;
		case INPUT:
		switch (port)
 378:	92 30       	cpi	r25, 0x02	; 2
 37a:	29 f1       	breq	.+74     	; 0x3c6 <MDIO_void_pin_set_direction+0x146>
 37c:	18 f4       	brcc	.+6      	; 0x384 <MDIO_void_pin_set_direction+0x104>
 37e:	91 30       	cpi	r25, 0x01	; 1
 380:	39 f0       	breq	.+14     	; 0x390 <MDIO_void_pin_set_direction+0x110>
 382:	08 95       	ret
 384:	93 30       	cpi	r25, 0x03	; 3
 386:	d1 f1       	breq	.+116    	; 0x3fc <MDIO_void_pin_set_direction+0x17c>
 388:	94 30       	cpi	r25, 0x04	; 4
 38a:	09 f4       	brne	.+2      	; 0x38e <MDIO_void_pin_set_direction+0x10e>
 38c:	4f c0       	rjmp	.+158    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 38e:	08 95       	ret
		{
			case A:
			local_pin =local_pin %10;
 390:	9d ec       	ldi	r25, 0xCD	; 205
 392:	89 9f       	mul	r24, r25
 394:	91 2d       	mov	r25, r1
 396:	11 24       	eor	r1, r1
 398:	96 95       	lsr	r25
 39a:	96 95       	lsr	r25
 39c:	96 95       	lsr	r25
 39e:	99 0f       	add	r25, r25
 3a0:	29 2f       	mov	r18, r25
 3a2:	22 0f       	add	r18, r18
 3a4:	22 0f       	add	r18, r18
 3a6:	92 0f       	add	r25, r18
 3a8:	89 1b       	sub	r24, r25
			CLEAR_BIT(DIRECTION_REGISTER_A,local_pin);
 3aa:	4a b3       	in	r20, 0x1a	; 26
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <MDIO_void_pin_set_direction+0x138>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <MDIO_void_pin_set_direction+0x134>
 3bc:	cb 01       	movw	r24, r22
 3be:	80 95       	com	r24
 3c0:	84 23       	and	r24, r20
 3c2:	8a bb       	out	0x1a, r24	; 26
			break;
 3c4:	08 95       	ret
			case B:
			local_pin =local_pin %20;
 3c6:	9d ec       	ldi	r25, 0xCD	; 205
 3c8:	89 9f       	mul	r24, r25
 3ca:	91 2d       	mov	r25, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	92 95       	swap	r25
 3d0:	9f 70       	andi	r25, 0x0F	; 15
 3d2:	99 0f       	add	r25, r25
 3d4:	99 0f       	add	r25, r25
 3d6:	29 2f       	mov	r18, r25
 3d8:	22 0f       	add	r18, r18
 3da:	22 0f       	add	r18, r18
 3dc:	92 0f       	add	r25, r18
 3de:	89 1b       	sub	r24, r25
			CLEAR_BIT(DIRECTION_REGISTER_B,local_pin);
 3e0:	47 b3       	in	r20, 0x17	; 23
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	b9 01       	movw	r22, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <MDIO_void_pin_set_direction+0x16e>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <MDIO_void_pin_set_direction+0x16a>
 3f2:	cb 01       	movw	r24, r22
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	87 bb       	out	0x17, r24	; 23
			break;
 3fa:	08 95       	ret
			case C:
			local_pin =local_pin %30;
 3fc:	99 e8       	ldi	r25, 0x89	; 137
 3fe:	89 9f       	mul	r24, r25
 400:	91 2d       	mov	r25, r1
 402:	11 24       	eor	r1, r1
 404:	92 95       	swap	r25
 406:	9f 70       	andi	r25, 0x0F	; 15
 408:	7e e1       	ldi	r23, 0x1E	; 30
 40a:	97 9f       	mul	r25, r23
 40c:	80 19       	sub	r24, r0
 40e:	11 24       	eor	r1, r1
			CLEAR_BIT(DIRECTION_REGISTER_C,local_pin);
 410:	44 b3       	in	r20, 0x14	; 20
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	b9 01       	movw	r22, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	cb 01       	movw	r24, r22
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	84 bb       	out	0x14, r24	; 20
			break;
 42a:	08 95       	ret
			case D:
			local_pin =local_pin %40;
 42c:	9d ec       	ldi	r25, 0xCD	; 205
 42e:	89 9f       	mul	r24, r25
 430:	91 2d       	mov	r25, r1
 432:	11 24       	eor	r1, r1
 434:	92 95       	swap	r25
 436:	96 95       	lsr	r25
 438:	97 70       	andi	r25, 0x07	; 7
 43a:	78 e2       	ldi	r23, 0x28	; 40
 43c:	97 9f       	mul	r25, r23
 43e:	80 19       	sub	r24, r0
 440:	11 24       	eor	r1, r1
			CLEAR_BIT(DIRECTION_REGISTER_D,local_pin);
 442:	41 b3       	in	r20, 0x11	; 17
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	cb 01       	movw	r24, r22
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	81 bb       	out	0x11, r24	; 17
 45c:	08 95       	ret

0000045e <MDIO_void_pin_set_data>:
		}
		break;
	}
}
void MDIO_void_pin_set_data(uint8 local_pin,uint8 local_value){
	uint8 port= local_pin/10;
 45e:	9d ec       	ldi	r25, 0xCD	; 205
 460:	89 9f       	mul	r24, r25
 462:	91 2d       	mov	r25, r1
 464:	11 24       	eor	r1, r1
 466:	96 95       	lsr	r25
 468:	96 95       	lsr	r25
 46a:	96 95       	lsr	r25
	
	switch (local_value)
 46c:	66 23       	and	r22, r22
 46e:	09 f4       	brne	.+2      	; 0x472 <MDIO_void_pin_set_data+0x14>
 470:	72 c0       	rjmp	.+228    	; 0x556 <MDIO_void_pin_set_data+0xf8>
 472:	61 30       	cpi	r22, 0x01	; 1
 474:	09 f0       	breq	.+2      	; 0x478 <MDIO_void_pin_set_data+0x1a>
 476:	e1 c0       	rjmp	.+450    	; 0x63a <MDIO_void_pin_set_data+0x1dc>
	{
	case HIGH:
		switch (port)
 478:	92 30       	cpi	r25, 0x02	; 2
 47a:	21 f1       	breq	.+72     	; 0x4c4 <MDIO_void_pin_set_data+0x66>
 47c:	18 f4       	brcc	.+6      	; 0x484 <MDIO_void_pin_set_data+0x26>
 47e:	91 30       	cpi	r25, 0x01	; 1
 480:	39 f0       	breq	.+14     	; 0x490 <MDIO_void_pin_set_data+0x32>
 482:	08 95       	ret
 484:	93 30       	cpi	r25, 0x03	; 3
 486:	c1 f1       	breq	.+112    	; 0x4f8 <MDIO_void_pin_set_data+0x9a>
 488:	94 30       	cpi	r25, 0x04	; 4
 48a:	09 f4       	brne	.+2      	; 0x48e <MDIO_void_pin_set_data+0x30>
 48c:	4c c0       	rjmp	.+152    	; 0x526 <MDIO_void_pin_set_data+0xc8>
 48e:	08 95       	ret
		{
			case A:
			local_pin =local_pin %10;
 490:	9d ec       	ldi	r25, 0xCD	; 205
 492:	89 9f       	mul	r24, r25
 494:	91 2d       	mov	r25, r1
 496:	11 24       	eor	r1, r1
 498:	96 95       	lsr	r25
 49a:	96 95       	lsr	r25
 49c:	96 95       	lsr	r25
 49e:	99 0f       	add	r25, r25
 4a0:	29 2f       	mov	r18, r25
 4a2:	22 0f       	add	r18, r18
 4a4:	22 0f       	add	r18, r18
 4a6:	92 0f       	add	r25, r18
 4a8:	89 1b       	sub	r24, r25
			SET_BIT(WRITE_DATA_REGISTER_A,local_pin);
 4aa:	4b b3       	in	r20, 0x1b	; 27
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <MDIO_void_pin_set_data+0x5a>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <MDIO_void_pin_set_data+0x56>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	8b bb       	out	0x1b, r24	; 27
			break;
 4c2:	08 95       	ret
			case B:
			local_pin =local_pin %20;
 4c4:	9d ec       	ldi	r25, 0xCD	; 205
 4c6:	89 9f       	mul	r24, r25
 4c8:	91 2d       	mov	r25, r1
 4ca:	11 24       	eor	r1, r1
 4cc:	92 95       	swap	r25
 4ce:	9f 70       	andi	r25, 0x0F	; 15
 4d0:	99 0f       	add	r25, r25
 4d2:	99 0f       	add	r25, r25
 4d4:	29 2f       	mov	r18, r25
 4d6:	22 0f       	add	r18, r18
 4d8:	22 0f       	add	r18, r18
 4da:	92 0f       	add	r25, r18
 4dc:	89 1b       	sub	r24, r25
			SET_BIT(WRITE_DATA_REGISTER_B,local_pin);
 4de:	48 b3       	in	r20, 0x18	; 24
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <MDIO_void_pin_set_data+0x8e>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <MDIO_void_pin_set_data+0x8a>
 4f0:	cb 01       	movw	r24, r22
 4f2:	84 2b       	or	r24, r20
 4f4:	88 bb       	out	0x18, r24	; 24
			break;
 4f6:	08 95       	ret
			case C:
			local_pin =local_pin %30;
 4f8:	99 e8       	ldi	r25, 0x89	; 137
 4fa:	89 9f       	mul	r24, r25
 4fc:	91 2d       	mov	r25, r1
 4fe:	11 24       	eor	r1, r1
 500:	92 95       	swap	r25
 502:	9f 70       	andi	r25, 0x0F	; 15
 504:	7e e1       	ldi	r23, 0x1E	; 30
 506:	97 9f       	mul	r25, r23
 508:	80 19       	sub	r24, r0
 50a:	11 24       	eor	r1, r1
			SET_BIT(WRITE_DATA_REGISTER_C,local_pin);
 50c:	45 b3       	in	r20, 0x15	; 21
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <MDIO_void_pin_set_data+0xbc>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <MDIO_void_pin_set_data+0xb8>
 51e:	cb 01       	movw	r24, r22
 520:	84 2b       	or	r24, r20
 522:	85 bb       	out	0x15, r24	; 21
			break;
 524:	08 95       	ret
			case D:
			local_pin =local_pin %40;
 526:	9d ec       	ldi	r25, 0xCD	; 205
 528:	89 9f       	mul	r24, r25
 52a:	91 2d       	mov	r25, r1
 52c:	11 24       	eor	r1, r1
 52e:	92 95       	swap	r25
 530:	96 95       	lsr	r25
 532:	97 70       	andi	r25, 0x07	; 7
 534:	78 e2       	ldi	r23, 0x28	; 40
 536:	97 9f       	mul	r25, r23
 538:	80 19       	sub	r24, r0
 53a:	11 24       	eor	r1, r1
			SET_BIT(WRITE_DATA_REGISTER_D,local_pin);
 53c:	42 b3       	in	r20, 0x12	; 18
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <MDIO_void_pin_set_data+0xec>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <MDIO_void_pin_set_data+0xe8>
 54e:	cb 01       	movw	r24, r22
 550:	84 2b       	or	r24, r20
 552:	82 bb       	out	0x12, r24	; 18
			break;
 554:	08 95       	ret
		}
		break;
	case LOW:
	switch (port)
 556:	92 30       	cpi	r25, 0x02	; 2
 558:	29 f1       	breq	.+74     	; 0x5a4 <MDIO_void_pin_set_data+0x146>
 55a:	18 f4       	brcc	.+6      	; 0x562 <MDIO_void_pin_set_data+0x104>
 55c:	91 30       	cpi	r25, 0x01	; 1
 55e:	39 f0       	breq	.+14     	; 0x56e <MDIO_void_pin_set_data+0x110>
 560:	08 95       	ret
 562:	93 30       	cpi	r25, 0x03	; 3
 564:	d1 f1       	breq	.+116    	; 0x5da <MDIO_void_pin_set_data+0x17c>
 566:	94 30       	cpi	r25, 0x04	; 4
 568:	09 f4       	brne	.+2      	; 0x56c <MDIO_void_pin_set_data+0x10e>
 56a:	4f c0       	rjmp	.+158    	; 0x60a <MDIO_void_pin_set_data+0x1ac>
 56c:	08 95       	ret
	{
		case A:
		local_pin =local_pin %10;
 56e:	9d ec       	ldi	r25, 0xCD	; 205
 570:	89 9f       	mul	r24, r25
 572:	91 2d       	mov	r25, r1
 574:	11 24       	eor	r1, r1
 576:	96 95       	lsr	r25
 578:	96 95       	lsr	r25
 57a:	96 95       	lsr	r25
 57c:	99 0f       	add	r25, r25
 57e:	29 2f       	mov	r18, r25
 580:	22 0f       	add	r18, r18
 582:	22 0f       	add	r18, r18
 584:	92 0f       	add	r25, r18
 586:	89 1b       	sub	r24, r25
		CLEAR_BIT(WRITE_DATA_REGISTER_A,local_pin);
 588:	4b b3       	in	r20, 0x1b	; 27
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <MDIO_void_pin_set_data+0x138>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <MDIO_void_pin_set_data+0x134>
 59a:	cb 01       	movw	r24, r22
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	8b bb       	out	0x1b, r24	; 27
		break;
 5a2:	08 95       	ret
		case B:
		local_pin =local_pin %20;
 5a4:	9d ec       	ldi	r25, 0xCD	; 205
 5a6:	89 9f       	mul	r24, r25
 5a8:	91 2d       	mov	r25, r1
 5aa:	11 24       	eor	r1, r1
 5ac:	92 95       	swap	r25
 5ae:	9f 70       	andi	r25, 0x0F	; 15
 5b0:	99 0f       	add	r25, r25
 5b2:	99 0f       	add	r25, r25
 5b4:	29 2f       	mov	r18, r25
 5b6:	22 0f       	add	r18, r18
 5b8:	22 0f       	add	r18, r18
 5ba:	92 0f       	add	r25, r18
 5bc:	89 1b       	sub	r24, r25
		CLEAR_BIT(WRITE_DATA_REGISTER_B,local_pin);
 5be:	48 b3       	in	r20, 0x18	; 24
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <MDIO_void_pin_set_data+0x16e>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <MDIO_void_pin_set_data+0x16a>
 5d0:	cb 01       	movw	r24, r22
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	88 bb       	out	0x18, r24	; 24
		break;
 5d8:	08 95       	ret
		case C:
		local_pin =local_pin %30;
 5da:	99 e8       	ldi	r25, 0x89	; 137
 5dc:	89 9f       	mul	r24, r25
 5de:	91 2d       	mov	r25, r1
 5e0:	11 24       	eor	r1, r1
 5e2:	92 95       	swap	r25
 5e4:	9f 70       	andi	r25, 0x0F	; 15
 5e6:	7e e1       	ldi	r23, 0x1E	; 30
 5e8:	97 9f       	mul	r25, r23
 5ea:	80 19       	sub	r24, r0
 5ec:	11 24       	eor	r1, r1
		CLEAR_BIT(WRITE_DATA_REGISTER_C,local_pin);
 5ee:	45 b3       	in	r20, 0x15	; 21
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	b9 01       	movw	r22, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <MDIO_void_pin_set_data+0x19e>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <MDIO_void_pin_set_data+0x19a>
 600:	cb 01       	movw	r24, r22
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	85 bb       	out	0x15, r24	; 21
		break;
 608:	08 95       	ret
		case D:
		local_pin =local_pin %40;
 60a:	9d ec       	ldi	r25, 0xCD	; 205
 60c:	89 9f       	mul	r24, r25
 60e:	91 2d       	mov	r25, r1
 610:	11 24       	eor	r1, r1
 612:	92 95       	swap	r25
 614:	96 95       	lsr	r25
 616:	97 70       	andi	r25, 0x07	; 7
 618:	78 e2       	ldi	r23, 0x28	; 40
 61a:	97 9f       	mul	r25, r23
 61c:	80 19       	sub	r24, r0
 61e:	11 24       	eor	r1, r1
		CLEAR_BIT(WRITE_DATA_REGISTER_D,local_pin);
 620:	42 b3       	in	r20, 0x12	; 18
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	b9 01       	movw	r22, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <MDIO_void_pin_set_data+0x1d0>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <MDIO_void_pin_set_data+0x1cc>
 632:	cb 01       	movw	r24, r22
 634:	80 95       	com	r24
 636:	84 23       	and	r24, r20
 638:	82 bb       	out	0x12, r24	; 18
 63a:	08 95       	ret

0000063c <MDIO_VOID_PORT_SET_DIRECTION>:
	}
	    break;
	}
}
void MDIO_VOID_PORT_SET_DIRECTION(uint8 local_port,uint8 local_pins,uint8 local_dir){
	switch (local_dir)
 63c:	44 23       	and	r20, r20
 63e:	d1 f0       	breq	.+52     	; 0x674 <MDIO_VOID_PORT_SET_DIRECTION+0x38>
 640:	41 30       	cpi	r20, 0x01	; 1
 642:	99 f5       	brne	.+102    	; 0x6aa <MDIO_VOID_PORT_SET_DIRECTION+0x6e>
	{
	case OUTPUT:
		switch (local_port)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	51 f0       	breq	.+20     	; 0x65c <MDIO_VOID_PORT_SET_DIRECTION+0x20>
 648:	28 f0       	brcs	.+10     	; 0x654 <MDIO_VOID_PORT_SET_DIRECTION+0x18>
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	59 f0       	breq	.+22     	; 0x664 <MDIO_VOID_PORT_SET_DIRECTION+0x28>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	69 f0       	breq	.+26     	; 0x66c <MDIO_VOID_PORT_SET_DIRECTION+0x30>
 652:	08 95       	ret
		{
			
			case PORT_A:
			DDRA |=local_pins;
 654:	8a b3       	in	r24, 0x1a	; 26
 656:	68 2b       	or	r22, r24
 658:	6a bb       	out	0x1a, r22	; 26
			break;
 65a:	08 95       	ret
			case PORT_B:
			DDRB |=local_pins;
 65c:	87 b3       	in	r24, 0x17	; 23
 65e:	68 2b       	or	r22, r24
 660:	67 bb       	out	0x17, r22	; 23
			break;
 662:	08 95       	ret
			case PORT_C:
			DDRC |=local_pins;
 664:	84 b3       	in	r24, 0x14	; 20
 666:	68 2b       	or	r22, r24
 668:	64 bb       	out	0x14, r22	; 20
			break;
 66a:	08 95       	ret
			case PORT_D:
			DDRD |=local_pins;
 66c:	81 b3       	in	r24, 0x11	; 17
 66e:	68 2b       	or	r22, r24
 670:	61 bb       	out	0x11, r22	; 17
			break;
 672:	08 95       	ret
		}
		break;
	case INPUT:
		switch (local_port)
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	59 f0       	breq	.+22     	; 0x68e <MDIO_VOID_PORT_SET_DIRECTION+0x52>
 678:	28 f0       	brcs	.+10     	; 0x684 <MDIO_VOID_PORT_SET_DIRECTION+0x48>
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	69 f0       	breq	.+26     	; 0x698 <MDIO_VOID_PORT_SET_DIRECTION+0x5c>
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	81 f0       	breq	.+32     	; 0x6a2 <MDIO_VOID_PORT_SET_DIRECTION+0x66>
 682:	08 95       	ret
		{
			
			case PORT_A:
			DDRA &= ~(local_pins);
 684:	8a b3       	in	r24, 0x1a	; 26
 686:	60 95       	com	r22
 688:	68 23       	and	r22, r24
 68a:	6a bb       	out	0x1a, r22	; 26
			break;
 68c:	08 95       	ret
			case PORT_B:
			DDRB &= ~(local_pins);
 68e:	87 b3       	in	r24, 0x17	; 23
 690:	60 95       	com	r22
 692:	68 23       	and	r22, r24
 694:	67 bb       	out	0x17, r22	; 23
			break;
 696:	08 95       	ret
			case PORT_C:
			DDRC &= ~(local_pins);
 698:	84 b3       	in	r24, 0x14	; 20
 69a:	60 95       	com	r22
 69c:	68 23       	and	r22, r24
 69e:	64 bb       	out	0x14, r22	; 20
			break;
 6a0:	08 95       	ret
			case PORT_D:
			DDRD &= ~(local_pins);
 6a2:	81 b3       	in	r24, 0x11	; 17
 6a4:	60 95       	com	r22
 6a6:	68 23       	and	r22, r24
 6a8:	61 bb       	out	0x11, r22	; 17
 6aa:	08 95       	ret

000006ac <MDIO_VOID_PORT_SET_DATA>:
	}
	
}
void MDIO_VOID_PORT_SET_DATA(uint8 local_port,uint8 local_pins,uint8 local_data){
	
	switch (local_data)
 6ac:	44 23       	and	r20, r20
 6ae:	d1 f0       	breq	.+52     	; 0x6e4 <MDIO_VOID_PORT_SET_DATA+0x38>
 6b0:	41 30       	cpi	r20, 0x01	; 1
 6b2:	99 f5       	brne	.+102    	; 0x71a <MDIO_VOID_PORT_SET_DATA+0x6e>
	{
	case HIGH:
		switch (local_port)
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	51 f0       	breq	.+20     	; 0x6cc <MDIO_VOID_PORT_SET_DATA+0x20>
 6b8:	28 f0       	brcs	.+10     	; 0x6c4 <MDIO_VOID_PORT_SET_DATA+0x18>
 6ba:	82 30       	cpi	r24, 0x02	; 2
 6bc:	59 f0       	breq	.+22     	; 0x6d4 <MDIO_VOID_PORT_SET_DATA+0x28>
 6be:	83 30       	cpi	r24, 0x03	; 3
 6c0:	69 f0       	breq	.+26     	; 0x6dc <MDIO_VOID_PORT_SET_DATA+0x30>
 6c2:	08 95       	ret
		{
			
			case PORT_A:
			PORTA |=local_pins;
 6c4:	8b b3       	in	r24, 0x1b	; 27
 6c6:	68 2b       	or	r22, r24
 6c8:	6b bb       	out	0x1b, r22	; 27
			break;
 6ca:	08 95       	ret
			case PORT_B:
			PORTB |=local_pins;
 6cc:	88 b3       	in	r24, 0x18	; 24
 6ce:	68 2b       	or	r22, r24
 6d0:	68 bb       	out	0x18, r22	; 24
			break;
 6d2:	08 95       	ret
			case PORT_C:
			PORTC |=local_pins;
 6d4:	85 b3       	in	r24, 0x15	; 21
 6d6:	68 2b       	or	r22, r24
 6d8:	65 bb       	out	0x15, r22	; 21
			break;
 6da:	08 95       	ret
			case PORT_D:
			PORTD |=local_pins;
 6dc:	82 b3       	in	r24, 0x12	; 18
 6de:	68 2b       	or	r22, r24
 6e0:	62 bb       	out	0x12, r22	; 18
			break;
 6e2:	08 95       	ret
			
		}
		break;
	case LOW:
		switch (local_port)
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	59 f0       	breq	.+22     	; 0x6fe <MDIO_VOID_PORT_SET_DATA+0x52>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <MDIO_VOID_PORT_SET_DATA+0x48>
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	69 f0       	breq	.+26     	; 0x708 <MDIO_VOID_PORT_SET_DATA+0x5c>
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	81 f0       	breq	.+32     	; 0x712 <MDIO_VOID_PORT_SET_DATA+0x66>
 6f2:	08 95       	ret
		{
			
			case PORT_A:
			PORTA &= ~(local_pins);
 6f4:	8b b3       	in	r24, 0x1b	; 27
 6f6:	60 95       	com	r22
 6f8:	68 23       	and	r22, r24
 6fa:	6b bb       	out	0x1b, r22	; 27
			break;
 6fc:	08 95       	ret
			case PORT_B:
			PORTB &= ~(local_pins);
 6fe:	88 b3       	in	r24, 0x18	; 24
 700:	60 95       	com	r22
 702:	68 23       	and	r22, r24
 704:	68 bb       	out	0x18, r22	; 24
			break;
 706:	08 95       	ret
			case PORT_C:
			PORTC &= ~(local_pins);
 708:	85 b3       	in	r24, 0x15	; 21
 70a:	60 95       	com	r22
 70c:	68 23       	and	r22, r24
 70e:	65 bb       	out	0x15, r22	; 21
			break;
 710:	08 95       	ret
			case PORT_D:
			PORTD &= ~(local_pins);
 712:	82 b3       	in	r24, 0x12	; 18
 714:	60 95       	com	r22
 716:	68 23       	and	r22, r24
 718:	62 bb       	out	0x12, r22	; 18
 71a:	08 95       	ret

0000071c <MDIO_uint8_PORT_READ_DATA>:
	break;
	}
	
}
uint8 MDIO_uint8_PORT_READ_DATA(uint8 local_port){
	switch (local_port)
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	41 f0       	breq	.+16     	; 0x730 <MDIO_uint8_PORT_READ_DATA+0x14>
 720:	28 f0       	brcs	.+10     	; 0x72c <MDIO_uint8_PORT_READ_DATA+0x10>
 722:	82 30       	cpi	r24, 0x02	; 2
 724:	39 f0       	breq	.+14     	; 0x734 <MDIO_uint8_PORT_READ_DATA+0x18>
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	39 f0       	breq	.+14     	; 0x738 <MDIO_uint8_PORT_READ_DATA+0x1c>
 72a:	08 c0       	rjmp	.+16     	; 0x73c <MDIO_uint8_PORT_READ_DATA+0x20>
	{
		
		case PORT_A:
		return PINA;
 72c:	89 b3       	in	r24, 0x19	; 25
 72e:	08 95       	ret
		break;
		case PORT_B:
		return PINB;
 730:	86 b3       	in	r24, 0x16	; 22
 732:	08 95       	ret
		break;
		case PORT_C:
		return PINC;
 734:	83 b3       	in	r24, 0x13	; 19
 736:	08 95       	ret
		break;
		case PORT_D:
		return PIND;
 738:	80 b3       	in	r24, 0x10	; 16
 73a:	08 95       	ret
		break;
		
	}
 73c:	08 95       	ret

0000073e <MUART_void_initiate>:
#include "UART_HEADER.h"

void MUART_void_initiate(){
	
	//set TX & RX pin as output-input
	MDIO_void_pin_set_direction(PD1,OUTPUT);
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	89 e2       	ldi	r24, 0x29	; 41
 742:	0e 94 40 01 	call	0x280	; 0x280 <MDIO_void_pin_set_direction>
	MDIO_void_pin_set_direction(PD0,INPUT);
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	88 e2       	ldi	r24, 0x28	; 40
 74a:	0e 94 40 01 	call	0x280	; 0x280 <MDIO_void_pin_set_direction>
	
	//set the baud rate
	UBRRL = 8;
 74e:	88 e0       	ldi	r24, 0x08	; 8
 750:	89 b9       	out	0x09, r24	; 9
	
	//set the data frame
	UCSRC = 0b10000110;
 752:	86 e8       	ldi	r24, 0x86	; 134
 754:	80 bd       	out	0x20, r24	; 32
	CLEAR_BIT(UCSRB,2);
 756:	8a b1       	in	r24, 0x0a	; 10
 758:	8b 7f       	andi	r24, 0xFB	; 251
 75a:	8a b9       	out	0x0a, r24	; 10
	
	//enable the RX,Tx circuits
	SET_BIT(UCSRB,3);   //RX enable
 75c:	8a b1       	in	r24, 0x0a	; 10
 75e:	88 60       	ori	r24, 0x08	; 8
 760:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,4);   //Tx enable
 762:	8a b1       	in	r24, 0x0a	; 10
 764:	80 61       	ori	r24, 0x10	; 16
 766:	8a b9       	out	0x0a, r24	; 10
 768:	08 95       	ret

0000076a <MUART_void_send_Byte>:
}
void MUART_void_send_Byte(uint8 local_data){
	UDR = local_data;
 76a:	8c b9       	out	0x0c, r24	; 12
	while(READ_BIT(UCSRA,5)==0);
 76c:	5d 9b       	sbis	0x0b, 5	; 11
 76e:	fe cf       	rjmp	.-4      	; 0x76c <MUART_void_send_Byte+0x2>
}
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
